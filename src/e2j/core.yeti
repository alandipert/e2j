module e2j.core;

import java.io: InputStreamReader, PrintWriter, Writer;
import java.lang.Readable;
import java.util: List, Map, Map$Entry;
import org.apache.commons.lang3.StringEscapeUtils;
import us.bpsm.edn: Keyword, Symbol;
import us.bpsm.edn.parser: Parser, Parsers;

effect f = (_ = f());

eachIndexed xs f = effect do:
  fold (_ i x = (f i x; i + 1)) 0 xs;
  done;

makeEdnParser r is ~Readable -> (() -> Some ~Object) =
  (config = Parsers#defaultConfiguration();
   input  = Parsers#newParseable(r);
   parser = Parsers#newParser(config);
   do:
     val = parser#nextValue(input);
     if (same? val Parser#END_OF_INPUT) then None () else Some val fi
   done);

getEntries m is ~Map -> list?<~Map$Entry> =
  map (_ x = x unsafely_as ~Map$Entry) m#entrySet()#toArray();

writeJson w edn is ~Writer -> ~Object -> () =
  if nullptr? edn then
    w#write("null");
  elif edn instanceof Keyword
    or edn instanceof Symbol then
    w#write("\"" ^ edn#toString() ^ "\"")
  elif edn instanceof Long
    or edn instanceof Double
    or edn instanceof Boolean then
    w#write(edn#toString())
  elif edn instanceof String then
    w#write("\"" ^ StringEscapeUtils#escapeJson(edn unsafely_as ~String) ^ "\"")
  elif edn instanceof List then
    xs      = (edn unsafely_as ~List)#toArray();
    lastIdx = length xs - 1;
    w#write("[");
    eachIndexed xs do i x:
      writeJson w x;
      if i != lastIdx then w#write(",") fi
    done;
    w#write("]")
  elif edn instanceof Map then
    entries = getEntries (edn unsafely_as ~Map);
    lastIdx = length entries - 1;
    writeEntry entry is ~Map$Entry -> () =
      (writeJson w entry#getKey();
       w#write(":");
       writeJson w entry#getValue());
    w#write("{");
    eachIndexed entries do i entry:
      writeEntry entry;
      if i != lastIdx then w#write(",") fi
    done;
    w#write("}")
  else failWith "Unknown EDN class: \(edn#getClass())"
  fi;

ednToJson rdr wrt is ~Readable-> ~Writer -> () =
  (next = makeEdnParser rdr;
   doParse = \case of
   Some edn: (writeJson wrt edn; wrt#write("\n"); doParse (next()));
   None (): ()
   esac;
   doParse (next()));

withIO f =
  (rdr = new InputStreamReader(System#in);
   wrt = new PrintWriter(System#out);
   f (rdr as ~Readable) (wrt as ~Writer);
   wrt#flush();
   rdr#close());

usage = "e2j $VERSION$ - convert between EDN and JSON.
Usage: e2j [-hej]\n
-e EDN in, JSON out (default)
-j JSON in, EDN out
-h Print this message";

main argv =
  case argv of
  []: withIO ednToJson;
  ["-e"]: withIO ednToJson;
  ["-j"]: println "Unimplemented";
  _: println usage
  esac;

class Main
    static void main(String[] argv)
        (main(map string argv));
end;